{"$schema":"https://ui.shadcn.com/schema/registry-item.json","name":"Shadcn Theme Editor","type":"registry:component","title":"Shadcn Theme Editor","description":"Shadcn Theme Editor is a user-friendly component designed to simplify the process of managing and customizing theme colors in Shadcn-based projects.","files":[{"path":"registry/magicui/index.tsx","type":"registry:component","content":"import {\n  Sheet,\n  SheetClose,\n  SheetContent,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport Sidebar from \"./sidebar-colors\";\nimport type {\n  ColorHandler,\n  DefaultTheme,\n  DefaultThemeValue,\n  Side,\n  Theme,\n} from \"./types\";\nimport { cn } from \"@/lib/utils\";\nimport { CopyIcon, PaletteIcon, Undo2Icon } from \"@/components/icons\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect } from \"react\";\nimport { detectShadcnVersion } from \"./lib/shadcn-version-detect\";\nimport { sharedData } from \"./lib/shared\";\nimport { hexToHsl, hexToLab, hexToOklch } from \"./lib/colorUtils\";\nimport {\n  CHART_COLORS,\n  MAIN_COLORS,\n  SIDEBAR_COLORS,\n} from \"./lib/default-colors\";\nimport { ls } from \"./lib/localstorage-helpers\";\nimport { copyCurrentTheme, resetCurrentTheme } from \"./lib/utils\";\n\nconst colorHandlers = {\n  oklch: (hex) => {\n    const oklch = hexToOklch(hex);\n    return [oklch, `oklch(${oklch.l} ${oklch.c} ${oklch.h})`];\n  },\n  lab: (hex) => {\n    const lab = hexToLab(hex);\n    return [lab, `lab(${lab.l}% ${lab.a} ${lab.b})`];\n  },\n  hsl: (hex) => {\n    const hsl = hexToHsl(hex);\n    return [hsl, `${hsl.h} ${hsl.s}% ${hsl.l}%`];\n  },\n} as const satisfies Record<string, ColorHandler>;\n\nexport default function Editor({\n  side = \"left\",\n  className,\n  customColors,\n  triggerClassName,\n  toCssString,\n  getCopyValue,\n}: {\n  side?: Side;\n  className?: string;\n  triggerClassName?: string;\n} & Pick<React.ComponentProps<typeof Sidebar>, \"customColors\"> &\n  Partial<Pick<typeof sharedData, \"toCssString\" | \"getCopyValue\">>) {\n  //*\n\n  useEffect(() => {\n    const checkLocalStorageTheme = () => {\n      const isDark = targetNode.classList.contains(\"dark\");\n\n      // no changes detected\n      if (sharedData.isDark === isDark)\n        // return sharedData.defaultThemeEmittor.setState({}); // reset theme\n        return;\n      sharedData.isDark = isDark;\n\n      // find from localstorage\n      const savedTheme = ls.get<Theme>(ls.getCurrentThemeKey());\n      const isThemeNotFound = !Object.keys(savedTheme ?? {}).length;\n\n      // Only perform a full theme reset if no saved theme was found.\n      // If a theme exists, keep some settings so the saved theme can override them later.\n      resetCurrentTheme(isThemeNotFound);\n\n      if (isThemeNotFound) return;\n\n      // Applies the saved theme to the live preview.\n      const defaultTheme: DefaultTheme = {};\n\n      Object.entries(sharedData.allColors).forEach(([propertyName, label]) => {\n        const hex = savedTheme![propertyName];\n        const value: DefaultThemeValue = {};\n\n        if (hex) {\n          const [color, cssValue] = sharedData.toCssString(hex);\n          document.documentElement.style.setProperty(propertyName, cssValue);\n\n          sharedData.currentTheme[propertyName] = hex;\n\n          value.hex = hex;\n          value.copyValue = sharedData.getCopyValue\n            ? sharedData.getCopyValue(hex)[1]\n            : cssValue;\n        }\n\n        defaultTheme[propertyName] = value;\n      });\n\n      sharedData.defaultThemeEmittor.setState(defaultTheme);\n    };\n\n    //* Detects theme changes by observing modifications to the `classList` on the `document.documentElement` element.\n    const targetNode = document.documentElement;\n    const observer = new MutationObserver(function (mutationsList, observer) {\n      for (const mutation of mutationsList) {\n        if (\n          mutation.type === \"attributes\" &&\n          mutation.attributeName === \"class\"\n        ) {\n          checkLocalStorageTheme();\n        }\n      }\n    });\n    observer.observe(targetNode, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    });\n\n    //* settings according to the new or old version\n    const shadcnVer = detectShadcnVersion();\n\n    //* set shared data\n    sharedData.shadcnVer = shadcnVer;\n\n    sharedData.allColors = {\n      ...MAIN_COLORS,\n      ...SIDEBAR_COLORS,\n      ...CHART_COLORS,\n      ...(customColors ?? {}),\n    };\n\n    if (shadcnVer === \"oklch\") {\n      sharedData.toCssString = colorHandlers.oklch;\n      // sharedData.getCopyValue = colorHandlers.oklch;\n    } else if (shadcnVer == \"lab\") {\n      sharedData.toCssString = colorHandlers.lab;\n      sharedData.getCopyValue = colorHandlers.oklch;\n    } else if (shadcnVer == \"hsl\") {\n      sharedData.toCssString = colorHandlers.hsl;\n      // sharedData.getCopyValue = colorHandlers.hsl;\n    } else {\n      sharedData.success = false;\n      console.error(\"STE: Unknown color value\");\n    }\n\n    sharedData.toCssString = toCssString ?? sharedData.toCssString;\n    sharedData.getCopyValue = getCopyValue ?? sharedData.getCopyValue;\n\n    checkLocalStorageTheme();\n  }, []);\n\n  return (\n    <Sheet>\n      <SheetTrigger\n        data-ste-trigger\n        className={cn(\n          \"text-primary bg-primary-foreground data-[state=open]:bg-primary data-[state=open]:text-primary-foreground fixed bottom-2 z-50 h-auto rounded-full border px-3 py-3 opacity-50 shadow-md drop-shadow-sm hover:opacity-100 data-[state=open]:opacity-100\",\n          side === \"right\" ? \"left-2\" : \"right-2\",\n          triggerClassName,\n        )}\n      >\n        <PaletteIcon className=\"size-6\" />\n      </SheetTrigger>\n      <SheetContent\n        side={side}\n        className={cn(\n          \"bg-background flex flex-col overflow-hidden py-4 sm:max-w-72\",\n          className,\n        )}\n      >\n        {sharedData.success ? (\n          <>\n            <Header />\n            <Sidebar customColors={customColors} />\n            <Footer />\n            <SheetClose />\n          </>\n        ) : (\n          <p className=\"text-destructive\">\n            Something went wrong. Check the console for more details.\n          </p>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n}\n\nfunction Header() {\n  return (\n    <div className=\"border-b px-2 shadow-md\">\n      <span className=\"flex items-center px-2 py-1 font-semibold\">\n        Shadcn Theme Editor\n      </span>\n      <div className=\"mb-1 mt-2 flex items-center justify-between gap-2 py-1 pl-2 text-sm font-semibold\">\n        Theming\n        <div className=\"flex pr-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            title=\"Copy theme to clipboard\"\n            data-copy-btn\n            onClick={(e) => {\n              const btn = e.currentTarget;\n              btn.disabled = true;\n              copyCurrentTheme();\n              setTimeout(() => {\n                btn.disabled = false;\n              }, 1000);\n            }}\n          >\n            <CopyIcon className=\"size-5\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            title=\"Reset to the default theme\"\n            data-reset-btn\n            onClick={(e) => (\n              e.ctrlKey\n                ? ls.deleteAllThemes()\n                : localStorage.removeItem(ls.getCurrentThemeKey()),\n              resetCurrentTheme()\n            )}\n          >\n            <Undo2Icon className=\"size-5\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Footer() {\n  return (\n    <footer className=\"flex justify-between gap-2 border-t px-2 pt-4 text-sm\">\n      <a\n        className=\"underline-offset-1 hover:underline\"\n        target=\"_blank\"\n        href=\"https://github.com/programming-with-ia/shadcn-theme-editor\"\n      >\n        ⭐ Star on Github\n      </a>\n      <a\n        className=\"underline-offset-1 hover:underline\"\n        target=\"_blank\"\n        href=\"https://www.npmjs.com/package/shadcn-theme-editor\"\n      >\n        npm\n      </a>\n    </footer>\n  );\n}\n"},{"path":"registry/magicui/lib/colorUtils.ts","type":"registry:component","content":"// --- Types ---\n\nimport { memoize } from \"./utils\";\n\nexport interface RGB {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport interface OKLCH {\n  l: number; // Lightness\n  c: number; // Chroma\n  h: number; // Hue\n}\n\nexport interface HSL {\n  h: number; // Hue (0–360)\n  s: number; // Saturation % (0–100)\n  l: number; // Lightness % (0–100)\n}\n\nexport interface LAB {\n  l: number; // Lightness (0–100)\n  a: number; // Green-Red axis\n  b: number; // Blue-Yellow axis\n}\n\n// --- Helpers ---\n\nexport function hexToRgb(hex: string): RGB {\n  hex = hex.replace(/^#/, \"\");\n  if (hex.length === 3) {\n    hex = hex\n      .split(\"\")\n      .map((c) => c + c)\n      .join(\"\");\n  }\n  hex = hex.slice(0, 6); // ignore alpha\n  const num = parseInt(hex, 16);\n  return {\n    r: (num >> 16) & 255,\n    g: (num >> 8) & 255,\n    b: num & 255,\n  };\n}\n\nexport const hexToRgbLinear = memoize((hex: string): RGB => {\n  const { r, g, b } = hexToRgb(hex);\n  return {\n    r: srgbToLinear(r),\n    g: srgbToLinear(g),\n    b: srgbToLinear(b),\n  };\n});\n\nfunction srgbToLinear(c: number): number {\n  c /= 255;\n  return c <= 0.04045 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n}\n\ninterface OKLab {\n  L: number;\n  a: number;\n  b: number;\n}\n\nfunction linearRgbToOklab({ r, g, b }: RGB): OKLab {\n  const l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\n  const m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\n  const s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\n\n  const l_ = Math.cbrt(l);\n  const m_ = Math.cbrt(m);\n  const s_ = Math.cbrt(s);\n\n  return {\n    L: 0.2104542553 * l_ + 0.793617785 * m_ - 0.0040720468 * s_,\n    a: 1.9779984951 * l_ - 2.428592205 * m_ + 0.4505937099 * s_,\n    b: 0.0259040371 * l_ + 0.7827717662 * m_ - 0.808675766 * s_,\n  };\n}\n\nfunction oklabToOklch({ L, a, b }: OKLab): OKLCH {\n  const C = Math.sqrt(a * a + b * b);\n  let h = Math.atan2(b, a) * (180 / Math.PI);\n  if (h < 0) h += 360;\n  return { l: L, c: C, h };\n}\n\ninterface XYZ {\n  x: number;\n  y: number;\n  z: number;\n}\n\nfunction linearRgbToXyz({ r, g, b }: RGB): XYZ {\n  // Using the sRGB D65 transformation matrix\n  const x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375;\n  const y = r * 0.2126729 + g * 0.7151522 + b * 0.072175;\n  const z = r * 0.0193339 + g * 0.119192 + b * 0.9503041;\n\n  // Scale to the standard XYZ range\n  return {\n    x: x * 100,\n    y: y * 100,\n    z: z * 100,\n  };\n}\n\nfunction xyzToLab({ x, y, z }: XYZ): LAB {\n  // D65 reference white point\n  const refX = 95.047;\n  const refY = 100.0;\n  const refZ = 108.883;\n\n  x /= refX;\n  y /= refY;\n  z /= refZ;\n\n  // The non-linear transformation function\n  const f = (t: number): number => {\n    const delta = 6 / 29;\n    return t > delta ** 3 ? Math.cbrt(t) : t / (3 * delta ** 2) + 4 / 29;\n  };\n\n  const fx = f(x);\n  const fy = f(y);\n  const fz = f(z);\n\n  const l = 116 * fy - 16;\n  const a = 500 * (fx - fy);\n  const b = 200 * (fy - fz);\n\n  return { l, a, b };\n}\n\n// --- Public Functions ---\n\nexport function hexToOklch(hex: string): OKLCH {\n  const linearRgb = hexToRgbLinear(hex);\n  const lab = linearRgbToOklab(linearRgb);\n  const lch = oklabToOklch(lab);\n  return {\n    l: +lch.l.toFixed(3),\n    c: +lch.c.toFixed(3),\n    h: +lch.h.toFixed(3),\n  };\n}\n\nexport function hexToHsl(hex: string): HSL {\n  const { r, g, b } = hexToRgb(hex);\n  const rNorm = r / 255;\n  const gNorm = g / 255;\n  const bNorm = b / 255;\n\n  const max = Math.max(rNorm, gNorm, bNorm);\n  const min = Math.min(rNorm, gNorm, bNorm);\n  const delta = max - min;\n\n  let h = 0;\n  if (delta !== 0) {\n    if (max === rNorm) {\n      h = ((gNorm - bNorm) / delta) % 6;\n    } else if (max === gNorm) {\n      h = (bNorm - rNorm) / delta + 2;\n    } else {\n      h = (rNorm - gNorm) / delta + 4;\n    }\n    h *= 60;\n    if (h < 0) h += 360;\n  }\n\n  const l = (max + min) / 2;\n  const s = delta === 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n  return {\n    h: +h.toFixed(3),\n    s: +(s * 100).toFixed(3),\n    l: +(l * 100).toFixed(3),\n  };\n}\n\nexport function hexToLab(hex: string): LAB {\n  const linearRgb = hexToRgbLinear(hex);\n  const xyz = linearRgbToXyz(linearRgb);\n  const lab = xyzToLab(xyz);\n\n  return {\n    l: +lab.l.toFixed(3),\n    a: +lab.a.toFixed(3),\n    b: +lab.b.toFixed(3),\n  };\n}\n"},{"path":"registry/magicui/lib/default-colors.ts","type":"registry:component","content":"import type { CustomColors } from \"../types\";\n\nexport const MAIN_COLORS: CustomColors = {\n  \"--background\": \"Background\",\n  \"--foreground\": \"Foreground\",\n  \"--card\": \"Card\",\n  \"--card-foreground\": \"Card Foreground\",\n  \"--popover\": \"Popover\",\n  \"--popover-foreground\": \"Popover Foreground\",\n  \"--primary\": \"Primary\",\n  \"--primary-foreground\": \"Primary Foreground\",\n  \"--secondary\": \"Secondary\",\n  \"--secondary-foreground\": \"Secondary Foreground\",\n  \"--muted\": \"Muted\",\n  \"--muted-foreground\": \"Muted Foreground\",\n  \"--accent\": \"Accent\",\n  \"--accent-foreground\": \"Accent Foreground\",\n  \"--destructive\": \"Destructive\",\n  \"--border\": \"Border\",\n  \"--input\": \"Input\",\n  \"--ring\": \"Ring\",\n};\n\nexport const SIDEBAR_COLORS: CustomColors = {\n  \"--sidebar\": \"Sidebar\",\n  \"--sidebar-foreground\": \"Sidebar Foreground\",\n  \"--sidebar-primary\": \"Sidebar Primary\",\n  \"--sidebar-primary-foreground\": \"Sidebar Primary Foreground\",\n  \"--sidebar-accent\": \"Sidebar Accent\",\n  \"--sidebar-accent-foreground\": \"Sidebar Accent Foreground\",\n  \"--sidebar-border\": \"Sidebar Border\",\n  \"--sidebar-ring\": \"Sidebar Ring\",\n};\n\nexport const CHART_COLORS: CustomColors = {\n  \"--chart-1\": \"Chart 1\",\n  \"--chart-2\": \"Chart 2\",\n  \"--chart-3\": \"Chart 3\",\n  \"--chart-4\": \"Chart 4\",\n  \"--chart-5\": \"Chart 5\",\n};\n"},{"path":"registry/magicui/lib/localstorage-helpers.ts","type":"registry:component","content":"import { sharedData } from \"./shared\";\n\nexport const LOCAL_STORAGE_KEY = \"shadcnTheme\";\n\nexport const ls = {\n  get: <T = unknown>(key: string): T | null => {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? (JSON.parse(item) as T) : null;\n    } catch (error) {\n      console.error(`Error getting item from localStorage:`, error);\n      return null;\n    }\n  },\n\n  set: (key: string, value: unknown): void => {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(`Error setting item in localStorage:`, error);\n    }\n  },\n\n  remove: (key: string): void => {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.error(`Error removing item from localStorage:`, error);\n    }\n  },\n\n  //* Helpers\n  saveCurrentTheme() {\n    this.set(this.getCurrentThemeKey(), sharedData.currentTheme);\n  },\n\n  getCurrentThemeKey() {\n    return LOCAL_STORAGE_KEY + \":\" + (sharedData.isDark ? \"dark\" : \"light\");\n  },\n\n  deleteAllThemes() {\n    for (let i = localStorage.length - 1; i >= 0; i--) {\n      const key = localStorage.key(i);\n      if (key?.startsWith(LOCAL_STORAGE_KEY)) {\n        localStorage.removeItem(key);\n      }\n    }\n  },\n};\n"},{"path":"registry/magicui/lib/shadcn-version-detect.ts","type":"registry:component","content":"export type ShadcnVersion = \"oklch\" | \"lab\" | \"hsl\";\n\nexport function detectShadcnVersion(\n  cssVarName = \"--primary\",\n): ShadcnVersion | undefined {\n  // SSR / non-browser guard\n  if (typeof window === \"undefined\" || typeof document === \"undefined\") {\n    return undefined;\n  }\n\n  try {\n    const raw = getComputedStyle(document.documentElement)\n      .getPropertyValue(cssVarName)\n      .trim()\n      .toLowerCase();\n\n    if (!raw) return undefined;\n    if (raw.startsWith(\"lab(\")) return \"lab\";\n    if (raw.startsWith(\"oklch(\")) return \"oklch\";\n    return \"hsl\";\n  } catch {\n    return undefined;\n  }\n}\n\n// export function isShadcnNew(mode: ShadcnVersion): boolean {\n//   return mode === \"new\";\n// }\n"},{"path":"registry/magicui/lib/shared.ts","type":"registry:component","content":"import type { ColorHandler, CustomColors, DefaultTheme, Theme } from \"../types\";\nimport { createEmittor, type Emittor } from \"emittor\";\nimport type { ShadcnVersion } from \"./shadcn-version-detect\";\n\nexport const sharedData: {\n  //get css properity value\n  toCssString: ColorHandler;\n  // used when user copy color value of single color for it's project\n  getCopyValue: ColorHandler | undefined; //* keep undefined here\n\n  // is shadcn new version colors oklch\n  shadcnVer: ShadcnVersion | undefined;\n\n  // Used to save data to localStorage, hold changes\n  currentTheme: Theme;\n\n  // Used to hold default theme when change dark/light theme\n  defaultThemeEmittor: Emittor<DefaultTheme>;\n\n  isDark: boolean | undefined;\n  // everything is okay\n  success: boolean;\n\n  // all colors:\n  allColors: CustomColors; //! currently no need to shared\n} = {\n  toCssString: undefined as never,\n  getCopyValue: undefined as never,\n  shadcnVer: undefined,\n  currentTheme: {},\n  isDark: undefined,\n  success: true,\n  defaultThemeEmittor: createEmittor({}),\n  allColors: {},\n};\n"},{"path":"registry/magicui/lib/utils.ts","type":"registry:component","content":"import { sharedData } from \"./shared\";\n\nexport const copy2clipboard = (text: string) =>\n  navigator.clipboard.writeText(text);\n\nexport function setProperity(proprity: string, value: string | null) {\n  // document.querySelector(\":root\")?.style.setProperty(proprity, value);\n  document.documentElement?.style.setProperty(proprity, value);\n}\n\nexport function memoize<Args extends unknown[], R>(\n  fn: (...args: Args) => R,\n): (...args: Args) => R {\n  const cache = new Map<string, R>();\n\n  return (...args: Args): R => {\n    // Create a cache key from arguments.\n    const key = JSON.stringify(args);\n    if (cache.has(key)) {\n      return cache.get(key)!; // safe because we just checked\n    }\n    const result = fn(...args);\n    cache.set(key, result);\n    return result;\n  };\n}\n\nexport function resetCurrentTheme(full = true) {\n  /**\n    @param full\n    Only perform a full theme reset if no saved theme was found.\n    If a theme exists, keep some settings so the saved theme can override them later.\n  */\n  const style = document.documentElement.style;\n\n  Object.keys(sharedData.currentTheme).forEach((propertyName) =>\n    style.removeProperty(propertyName),\n  );\n  sharedData.currentTheme = {};\n  if (full) {\n    sharedData.defaultThemeEmittor.setState({});\n  }\n}\n\nexport function copyCurrentTheme() {\n  copy2clipboard(\n    Object.entries(sharedData.currentTheme)\n      .map(\n        ([propertyName, hex]) =>\n          propertyName +\n          \": \" +\n          (sharedData.getCopyValue ?? sharedData.toCssString)(hex)[1] +\n          \";\",\n      )\n      .join(\"\\n\"),\n  );\n}\n"},{"path":"registry/magicui/sidebar-colors.tsx","type":"registry:component","content":"import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport type { CustomColors, DefaultThemeValue } from \"./types\";\nimport {\n  CHART_COLORS,\n  MAIN_COLORS,\n  SIDEBAR_COLORS,\n} from \"./lib/default-colors\";\nimport { Button } from \"@/components/ui/button\";\nimport { copy2clipboard, setProperity } from \"./lib/utils\";\nimport debounce from \"lodash.debounce\";\nimport { sharedData } from \"./lib/shared\";\nimport { useRef } from \"react\";\nimport { useEmittor } from \"emittor\";\nimport { ls } from \"./lib/localstorage-helpers\";\n\nexport default function Sidebar({\n  customColors,\n}: {\n  customColors?: CustomColors;\n}) {\n  const [defaultTheme, setDefaultTheme] = useEmittor(\n    sharedData.defaultThemeEmittor,\n  );\n\n  return (\n    <>\n      <Accordion\n        defaultValue={[\"item-2\"]}\n        className=\"flex flex-col overflow-y-auto py-2\"\n        type=\"multiple\"\n      >\n        {Object.entries(MAIN_COLORS).map(([propertyName, label]) => (\n          <ColorItem\n            key={propertyName}\n            property={propertyName}\n            label={label}\n            defaultValue={defaultTheme[propertyName]}\n          />\n        ))}\n        {(\n          [\n            customColors && {\n              key: \"custom-colors\",\n              title: \"Custom\",\n              colors: customColors,\n            },\n            { key: \"sidebar-colors\", title: \"Sidebar\", colors: SIDEBAR_COLORS },\n            { key: \"chart-colors\", title: \"Chart\", colors: CHART_COLORS },\n          ].filter(Boolean) as {\n            key: string;\n            title: string;\n            colors: CustomColors;\n          }[]\n        ).map(({ key, title, colors }) => (\n          <AccordionItem\n            key={key}\n            value={key}\n            className=\"flex flex-col border-b-0\"\n          >\n            <AccordionTrigger className=\"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50 text-muted-foreground px-4 py-2\">\n              {title}\n            </AccordionTrigger>\n            <AccordionContent className=\"flex flex-col\">\n              {Object.entries(colors).map(([propertyName, label]) => (\n                <ColorItem\n                  key={key + propertyName}\n                  property={propertyName}\n                  label={label}\n                  defaultValue={defaultTheme[propertyName]}\n                />\n              ))}\n            </AccordionContent>\n          </AccordionItem>\n        ))}\n      </Accordion>\n    </>\n  );\n}\n\n// Create a debounced version of the function\nconst debouncedUpdateCss = debounce(\n  ({\n    property,\n    value,\n    hex,\n  }: {\n    property: string;\n    value: string;\n    hex: string;\n  }) => {\n    sharedData.currentTheme[property] = hex;\n    setProperity(property, value);\n    debouncedSaveCurrentTheme();\n  },\n  100,\n  { maxWait: 1000 },\n);\n\nconst debouncedSaveCurrentTheme = debounce(() => ls.saveCurrentTheme(), 1000, {\n  maxWait: 5000,\n});\n\nfunction ColorItem({\n  label,\n  property,\n  defaultValue,\n}: {\n  label: string;\n  property: string;\n  defaultValue: DefaultThemeValue | undefined;\n}) {\n  //! fix-later: copied value is diff from css value\n  // const title = property + \": \" + \"not-changed;\";\n  const title =\n    property + \": \" + (defaultValue?.copyValue ?? \"not-changed\") + \";\";\n  const btnRef = useRef<HTMLButtonElement>(null);\n\n  return (\n    <Button\n      variant=\"ghost\"\n      className=\"h-10 justify-start transition-none select-none mx-2\"\n      title={title}\n      ref={btnRef}\n      //   onDoubleClick={() => copy2clipboard(title)}\n      onDoubleClick={(e) => copy2clipboard(e.currentTarget.title)}\n    >\n      <div\n        className=\"relative size-6 cursor-pointer overflow-hidden rounded border shadow-md drop-shadow-md\"\n        style={{ backgroundColor: `var(${property})` }}\n      >\n        <input\n          className=\"absolute inset-0 opacity-0\"\n          key={defaultValue?.hex}\n          defaultValue={defaultValue?.hex}\n          // defaultValue={colord(color).toHex()}\n          type=\"color\"\n          onChange={(e) => {\n            const hex = e.currentTarget.value;\n\n            const [_, cssValue] = sharedData.toCssString(hex);\n\n            if (btnRef.current) {\n              btnRef.current.title =\n                property +\n                \": \" +\n                (sharedData.getCopyValue\n                  ? sharedData.getCopyValue(hex)[1]\n                  : cssValue) +\n                \";\";\n            }\n\n            debouncedUpdateCss({ property, value: cssValue, hex });\n          }}\n          // onClick={(e) => e.stopPropagation()} //* disable copy to clipboard // i think no need for input double click\n        />\n      </div>\n      <span className=\"flex-shrink-0\">{label}</span>\n    </Button>\n  );\n}\n"},{"path":"registry/magicui/types.ts","type":"registry:component","content":"import type { HSL, LAB, OKLCH } from \"./lib/colorUtils\";\n\nexport type Side = \"left\" | \"right\";\nexport type CustomColors = Record<string, string>; // --property-name: label/title/name\n// export type Theme = Record<string, { label: string; color: string }>; // --property-name: { label: label/title/name, color: #hc0l0r }\nexport type Theme = Record<string, string>; // --property-name: hex\n\nexport type DefaultThemeValue = {\n  hex?: string; // for default color\n  // cssValue: string; // for title/tooltip\n  copyValue?: string; // for title/tooltip\n};\n\nexport type DefaultTheme = Record<\n  string, // --property-name\n  DefaultThemeValue\n>;\n\nexport type ColorHandler = (hex: string) => [OKLCH | HSL | LAB, string]; //! fix-later: make this to return only string\n"}],"registryDependencies":["accordion","button","sheet"],"dependencies":["lucide-react"]}
